generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Users come from your auth provider (Clerk/NextAuth). We store a shadow user record for app data.
model User {
  id        String   @id @default(cuid())
  authId    String?  @unique
  email     String   @unique
  name      String?
  role      Role     @default(BRAND)

  brands    Brand[]
  creators  Creator[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum Role {
  BRAND
  CREATOR
  ADMIN
}

model Brand {
  id         String    @id @default(cuid())
  ownerId    String
  owner      User      @relation(fields: [ownerId], references: [id])
  name       String
  website    String?
  plan       Plan      @default(FREE)

  stripeCustomerId     String?  @unique
  stripeSubscriptionId String?
  currentPeriodEnd     DateTime?

  credits    Int      @default(0)
  usages     Usage[]

  campaigns  Campaign[]
  shortlists Shortlist[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([ownerId])
}

model Usage {
  id        String   @id @default(cuid())
  brandId   String
  brand     Brand    @relation(fields: [brandId], references: [id])
  type      UsageType
  amount    Int
  note      String?
  createdAt DateTime @default(now())

  @@index([brandId, createdAt])
}

enum UsageType {
  AI_ANALYZE
  AI_MATCH
  TOP_UP
  ADJUST
}

enum Plan {
  FREE
  PRO
}

model Creator {
  id          String   @id @default(cuid())
  name        String
  handle      String   @unique
  platform    Platform @default(INSTAGRAM)
  niche       String?
  tone        String?
  values      String[]
  followers   Int      @default(0)
  avgViews    Int      @default(0)
  engagement  Float?
  location    String?
  bio         String?
  tags        String[]

  // NEW: AI analysis snapshots
  analysisAt  DateTime?
  keywords    String[]

  // NEW: embeddings (unsupported type â€“ handled via raw SQL)
  embedding   Unsupported("vector")?

  matches     Match[]
  shortlists  ShortlistItem[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([platform])
  @@index([followers])
  @@fulltext([name, handle, bio])
}

enum Platform {
  INSTAGRAM
  TIKTOK
  YOUTUBE
}

model Campaign {
  id         String  @id @default(cuid())
  brandId    String
  brand      Brand   @relation(fields: [brandId], references: [id])
  title      String
  brief      String?
  budgetEUR  Int?
  niche      String?
  targetTone String?

  // NEW: AI desired attributes
  desiredValues   String[]
  desiredKeywords String[]
  analyzedAt      DateTime?

  // NEW: embedding for semantic retrieval
  embedding Unsupported("vector")?

  matches    Match[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([brandId])
}

model Match {
  id          String    @id @default(cuid())
  campaignId  String
  creatorId   String
  campaign    Campaign  @relation(fields: [campaignId], references: [id])
  creator     Creator   @relation(fields: [creatorId], references: [id])
  matchScore  Int       @default(0)
  rationale   String?
  createdAt   DateTime  @default(now())

  @@unique([campaignId, creatorId])
  @@index([matchScore])
}

model Shortlist {
  id        String         @id @default(cuid())
  brandId   String
  brand     Brand          @relation(fields: [brandId], references: [id])
  name      String         @default("Shortlist")
  items     ShortlistItem[]
  createdAt DateTime       @default(now())
}

model ShortlistItem {
  id          String   @id @default(cuid())
  shortlistId String
  creatorId   String
  shortlist   Shortlist @relation(fields: [shortlistId], references: [id])
  creator     Creator   @relation(fields: [creatorId], references: [id])
  note        String?
  createdAt   DateTime  @default(now())

  @@unique([shortlistId, creatorId])
}

